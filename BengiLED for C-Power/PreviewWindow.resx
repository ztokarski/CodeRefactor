<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        a/9eXv3/Xl7K/2Vl4/9zc///T1G2/19e+v9PVbf/Qk2U/z5Bu/8haYH/C0pd/w+WsP9G8v//guj4/4Lq
        9/934/D/cO7+/2v///8tho//BlZc/wQqKv8AERD/FCIi9RImJTwBFhUBAAAAAENDXoVNTVT/SEhR/z09
        iP9BQaj/RUVi/3Z2+f9xcf//b2///2dn//9YWP7/UE///0JIvP84Q4b/OESg/y6owv8xeIv/JqvC/x7c
        +v8QVlf/B0A//yh4fP9t4Or/c/z//y2AiP8NdH7/CU1S/wAPDv8PHRz/FCMjYgAkIwEAAAAASUlOqUJC
        S/8/P0z/QkJW/0xMkf88PGP/amro/2ho9f9dXfX/U1P1/0pK9v9AQPT/NjvF/ycvov8wTHv/JLbX/zJ4
        if8qr8b/IN77/yxucf9DlJr/gfD7/4b0//96+v//L4KI/x+Ci/8Ubnf/AAgG/wcVFf8UIiKFAAAAAEdH
        SwlCQkffODg//zY2Q/81NTv/X1+3/1FRx/81NWb/MzNd/zIyX/8yM1//MTRg/y80aP8bIaz/AwH9/ypH
        bv8jt9b/LHSC/yatwv8g3vv/MGts/0OHif9y1+D/h/P+/4H5//9LmqD/Ppqi/zKEjf8YJyX/FiUl/yQy
        MZcAGRgENTU6Ezc3OvAuLjT/Li43/ywsNf9BQXT/R0eg/zIyhf8xMaX/MjK3/ycnuf8YGar/GyCB/xMZ
        oP8TG6L/JzxT/yOguv8ncX3/JKq+/yHi/f8nlZ7/KYyS/0qlrP945fL/ivz//1ehp/9HmZ//RoCF/0BT
        Uv9GVFT/TFdWvwQVFRUvLzI0Kyst+SMjKP8kJCv/IyMu/yAgKf8eHiX/ISE0/yMjSv8jI2D/HR9n/xwf
        Uf8fJj7/Iy4y/yM0Nf8iMz3/Imx8/yJkbv8iqbz/IfL//yDt//8f7v//Y/T//4v4//+P////WaOp/zuA
        hf84Wlz/OExL/z5LS/9MVVXmBhYWIS8vMHAeHh//GRkb/xgYHP8XFx3/FhYf/xYWIf8WFiP/FhYi/xUV
        If8WFyH/Fhkl/xUZKP8VHiv/FiQv/xkqMv8bREz/IKW4/x50ff8ehpH/H4aQ/x2HkP8vi5P/SI+U/0iT
        mP9ctsD/WLG6/yxERP8yQ0L/M0A//0dPT/MRHBwrLCwtfiUlJvAiIiTwISEk8CAgJfAeHibwHR0n8B0d
        KfAeHivwHh4s8B8gLvAgIzHwICYz8CAoMvgbISb/FyAk/xQuMv8bs8n/GoaT/xtye/8ejpj/IJGb/xyR
        nP8si5T/Onh8/2PG0f9RnaX/JTg3/yo4OP8rNTX/QUZG+yAnJ0sXFxcKBQUKEQUFDhEFBRYRBQUdEQUF
        KBEFBTIRBQU6EQUFPREGBkERBgxEEgkWTRIMIVQPFSAwKx9OYXQfRE2gIDw+5B8rK/oaKSv/FlJY/xeH
        k/8XkJ3/GJKg/yJ6g/8jSEr/HDg4/x0zM/8gLy//Ii4t/yMqKv80ODj/IycndwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE3vEMDp2gMxaW
        k3cdSEemHS8s6RwZFv0WExL/Dx0c/w0fH/8PIB//EyEg/xchIf8ZIiH/GyAg/ycpKf8jJyeMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAE39oOEJ2dPhWCgHsfMzOtHi0t6xkmJv8SGhn/EBYW/w0TEv8PEhL/FxkZ/yss
        LKUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXTUwOHTQ0QiE0M3weKCiyHyIi7RcZ
        Gf8REhL/JCUl0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAmLi4PIyYmRyYmJoEmJiad///4A///AAOAAAADgAAAA4AAAAOAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAHAAAADwAAAAYAAAAGAAAABgAAAAYAAAACAAAAAgAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP//AAD///AA////AP////A=
</value>
  </data>
</root>